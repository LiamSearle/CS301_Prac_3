
   1   COMPILER Parva $CN
   2   /* Parva level 1 grammar  - Coco/R for C# (EBNF)
   3      P.D. Terry, Rhodes University, 2003
   4      Grammar only */
   5 
   6   CHARACTERS
   7     lf         = CHR(10) .
   8     backslash  = CHR(92) .
   9     control    = CHR(0) .. CHR(31) .
  10     letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  11                  + "abcdefghijklmnopqrstuvwxyz" .
  12     digit      = "0123456789" .
  13     stringCh   = ANY - '"' - control - backslash .
  14     charCh     = ANY - "'" - control - backslash .
  15     printable  = ANY - control .
  16 
  17   TOKENS
  18     identifier = letter { letter | digit | "_" } .
  19     number     = digit { digit } .
  20     stringLit  = '"' { stringCh | backslash printable } '"' .
  21     charLit    = "'" ( charCh   | backslash printable ) "'" .
  22 
  23   COMMENTS FROM "//" TO lf
  24   COMMENTS FROM "/*" TO "*/"
  25   IGNORE CHR(9) .. CHR(13)
  26 
  27   PRODUCTIONS
  28     Parva             = "void" identifier "(" ")" Block .
  29     Block             = "{" { Statement } "}" .
  30     Statement         =   Block | ";"
  31                         | ConstDeclarations | VarDeclarations
  32                         | Assignment | IfStatement | WhileStatement
  33                         | ReturnStatement | HaltStatement
  34                         | ReadStatement | WriteStatement | ElseStatement .
  35     ConstDeclarations = "const" OneConst { "," OneConst } ";" .
  36     OneConst          = identifier "=" Constant .
  37     Constant          =   number | charLit
  38                         | "true" | "false" | "null" .
  39     VarDeclarations   = Type OneVar { "," OneVar } ";" .
  40     OneVar            = identifier [ "=" Expression ] .
  41     Assignment        = Designator "=" Expression ";" .
  42     Designator        = identifier [ "[" Expression "]" ] .
  43     IfStatement       = "if" "(" Condition ")" Statement .
  44     ElseStatement     = "else" Statement .
  45     WhileStatement    = "while" "(" Condition ")" Statement .
  46     ReturnStatement   = "return" ";" .
  47     HaltStatement     = "halt" ";" .
  48     ReadStatement     = "read" "(" ReadElement
  49                                    { "," ReadElement } ")" ";" .
  50     ReadElement       = stringLit | Designator .
  51     WriteStatement    = "write" "(" WriteElement
  52                                     { "," WriteElement } ")" ";" .
  53     WriteElement      = stringLit | Expression .
  54     Condition         = Expression .
  55     Expression        = AddExp [ RelOp AddExp ] .
  56     AddExp            = [ "+" | "-" ] Term { AddOp Term } .
  57     Term              = Factor { MulOp Factor } .
  58     Factor            =   Designator | Constant
  59                         | "new" BasicType "[" Expression "]"
  60                         | "!" Factor | "(" Expression ")" .
  61     Type              = BasicType [ "[]" ] .
  62     BasicType         = "int" | "bool" .
  63     AddOp             = "+" | "-" | "||" .
  64     MulOp             = "*" | "/" | "&&" | "%" .
  65     RelOp             = "==" | "!=" | "<" | "<=" | ">" | ">=" .
  66   END Parva.

0 errors detected
